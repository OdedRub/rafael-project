# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by separate terms of service, privacy policy, and support documentation.

name: Multistage Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      jar_version: ${{ steps.bump.outputs.jar_version }}
      
    steps:
    - name: Checkout master
      uses: actions/checkout@v3
      
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven

    - name: Define old version
      id: old_ver
      run: |
        old_version=$(cd myapp && mvn help:evaluate -Dexpression=project.version | grep -E '^[0-9]+\.[0-9]+\.[0-9]+')
        echo "OLD_VER=${old_version}" >> $GITHUB_ENV
        
    - name: Test versioning
      run: |
        echo "Current jar version is " ${OLD_VER}
        
    #- name: Bump version
    #  id: bump_version
    #  uses: christian-draeger/increment-semantic-version@1.1.0
    #  with:
    #    current-version: $(echo ${OLD_VER})
    #    version-fragment: 'bug'  # bug (= patch), major, feature (= minor), alpha, beta, pre, rc
        
    #- name: Check versioning
    #  run: | 
    #    echo ${{ steps.bump_version.outputs.next-version }}
      
    - name: Bump jar version
      id: bump
      run: |
        POMPATH=myapp
        OLD_VERSION=$(cd $POMPATH && mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        BUMP_MODE="none"
        old="$OLD_VERSION"
        parts=( ${old//./ } )
        bv=$((parts[2] + 1))
        NEW_VERSION="${parts[0]}.${parts[1]}.${bv}"
        echo "pom.xml at" $POMPATH "will be bumped from" $OLD_VERSION "to" $NEW_VERSION
        mvn -q versions:set -DnewVersion="${NEW_VERSION}" --file $POMPATH/pom.xml
        echo "jar_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
    
    - name: Docker build
      id: build
      working-directory: ./myapp
      run: |        
        docker build --build-arg VER=${{steps.bump.outputs.jar_version}} -t odedruby/rafael-project:${{steps.bump.outputs.jar_version}} .
        
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Docker push
      run: |
        docker push odedruby/rafael-project:${{steps.bump.outputs.jar_version}}
      
    - name: Update POM file
      run: |
        git config --global user.email "odedrub@gmail.com"
        git config --global user.name "Oded"
        git add .
        
  
        git commit -m "updated jar version in pom file"
        git push
  
  
  run:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
            
      - name: Run container
        run: |
          docker run odedruby/rafael-project:${{needs.build.outputs.jar_version}}     
